{"version":3,"sources":["ttt/utilities.js","ttt/ticTacToe.js","ttt/game.js","App.js","serviceWorker.js","index.js"],"names":["getWinningArray","gridSize","xyAxis","axis","row","xAxis","yAxis","colum","push","slice","getXYAxis","crossAxis","crossLeftAxis","crossRightAxis","totalBoxes","Math","pow","rowAxis","getCrossAxis","DisplayGameStatus","props","isGameOver","playerTurn","style","cursor","onClick","window","location","reload","Box","className","onClickListener","value","Table","boxIndex","this","table","key","rowIndex","renderBox","children","renderRow","React","Component","TicTacToe","state","handleOnClick","bind","setState","lines","lineIndex","every","box","length","getGameStatus","GetRadioTypeOption","type","name","displayOption","Options","onChange","PlayBtn","ChoseLevel","option","onChangeValue","event","target","Game","level","simple","medium","hard","App","textAlign","margin","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.edb40bbc.chunk.js","sourcesContent":["const getCrossAxis = (gridSize) => {\n  let crossLeftAxis = [];\n  let crossRightAxis = [];\n\n  const totalBoxes = Math.pow(gridSize, 2);\n  for (let rowAxis = 0; rowAxis <= totalBoxes - 1; rowAxis += gridSize + 1) {\n    crossLeftAxis.push(rowAxis);\n  }\n\n  for (\n    let rowAxis = totalBoxes - gridSize;\n    0 < rowAxis;\n    rowAxis -= gridSize - 1\n  ) {\n    crossRightAxis.push(rowAxis);\n  }\n\n  return [crossLeftAxis, crossRightAxis];\n};\n\nconst getXYAxis = (gridSize) => {\n  let axis = [];\n  for (let row = 0; row < gridSize; row++) {\n    const xAxis = [];\n    const yAxis = [];\n    for (let colum = 0; colum < gridSize; colum++) {\n      xAxis.push(colum + row * gridSize);\n      yAxis.push(row + colum * gridSize);\n    }\n    axis.push(xAxis, yAxis);\n  }\n  return axis.slice();\n};\n\nconst getWinningArray = (gridSize) => {\n  let xyAxis = getXYAxis(gridSize);\n  let crossAxis = getCrossAxis(gridSize);\n  return [...xyAxis, ...crossAxis];\n};\n\nexport default getWinningArray;\n","import React from 'react';\nimport './ticTacToe.css';\nimport getWinningArray from './utilities';\n\nconst DisplayGameStatus = (props) => {\n  if (!props.isGameOver) {\n    return <div>It's {props.playerTurn} PlayerTurn</div>;\n  }\n  return (\n    <div>\n      <div>player {props.playerTurn} won the Game</div>\n      <button\n        style={{ cursor: 'pointer' }}\n        onClick={() => window.location.reload()}\n      >\n        Play Again\n      </button>\n    </div>\n  );\n};\n\nconst Box = (props) => {\n  return (\n    <button className=\"box\" onClick={props.onClickListener}>\n      {props.value}\n    </button>\n  );\n};\n\nclass Table extends React.Component {\n  renderBox(boxIndex) {\n    return (\n      <Box\n        value={this.props.table[boxIndex]}\n        onClickListener={() => this.props.onClickListener(boxIndex)}\n        key={boxIndex}\n      />\n    );\n  }\n\n  renderRow(rowIndex) {\n    let row = [];\n    for (let colum = 0; colum < this.props.gridSize; colum++) {\n      row.push(this.renderBox(colum + rowIndex * this.props.gridSize));\n    }\n    return row;\n  }\n\n  render() {\n    let children = [];\n\n    for (let rowIndex = 0; rowIndex < this.props.gridSize; rowIndex++) {\n      const row = this.renderRow(rowIndex);\n      children.push(\n        <div className=\"row\" key={rowIndex}>\n          {row}\n        </div>\n      );\n    }\n    return <div>{children}</div>;\n  }\n}\n\nconst getGameStatus = (table, gridSize) => {\n  const lines = getWinningArray(gridSize);\n  for (let lineIndex = 0; lineIndex < lines.length; lineIndex++) {\n    let areInLine = lines[lineIndex].every(\n      (box) => table[box] && table[box] === table[lines[lineIndex][0]]\n    );\n    if (areInLine) return true;\n  }\n  return false;\n};\n\nclass TicTacToe extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      table: [],\n      playerTurn: true,\n      isGameOver: false,\n    };\n    this.handleOnClick = this.handleOnClick.bind(this);\n  }\n\n  handleOnClick(boxIndex) {\n    this.setState((state) => {\n      if (state.table[boxIndex] || state.isGameOver) return;\n      const table = state.table.slice();\n      table[boxIndex] = state.playerTurn ? 'ðŸŸ¢' : 'ðŸ”´';\n      const isGameOver = getGameStatus(table, this.props.gridSize);\n      return {\n        table,\n        playerTurn: isGameOver ? state.playerTurn : !state.playerTurn,\n        isGameOver,\n      };\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Table\n          table={this.state.table}\n          onClickListener={this.handleOnClick}\n          gridSize={this.props.gridSize}\n        />\n        <br></br>\n        <DisplayGameStatus\n          playerTurn={this.state.playerTurn ? 'ðŸŸ¢' : 'ðŸ”´'}\n          isGameOver={this.state.isGameOver}\n        />\n      </div>\n    );\n  }\n}\n\nexport default TicTacToe;\n","import React from 'react';\nimport TicTacToe from './ticTacToe';\n\nconst GetRadioTypeOption = (props) => {\n  return (\n    <div>\n      <input type=\"radio\" value={props.value} name=\"level\" />\n      {props.displayOption}\n    </div>\n  );\n};\n\nconst Options = (props) => (\n  <div className=\"options\" onChange={props.onChange}>\n    <GetRadioTypeOption value=\"simple\" displayOption=\"Simple\" />\n    <GetRadioTypeOption value=\"medium\" displayOption=\"Medium\" />\n    <GetRadioTypeOption value=\"hard\" displayOption=\"Hard\" />\n  </div>\n);\n\nconst PlayBtn = (props) => (\n  <button className=\"optionBtn\" onClick={props.onClick}>\n    Play\n  </button>\n);\n\nclass ChoseLevel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { option: null };\n    this.handleOnClick = this.handleOnClick.bind(this);\n    this.onChangeValue = this.onChangeValue.bind(this);\n  }\n\n  handleOnClick() {\n    this.props.onClick(this.state.option);\n  }\n\n  onChangeValue(event) {\n    this.setState({ option: event.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"gameBoard\">\n        <Options onChange={this.onChangeValue} />\n        <PlayBtn onClick={this.handleOnClick} />\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { level: null };\n    this.handleOnClick = this.handleOnClick.bind(this);\n  }\n\n  handleOnClick(option) {\n    this.setState({ level: option });\n  }\n\n  render() {\n    if (!this.state.level) {\n      return <ChoseLevel onClick={this.handleOnClick} />;\n    }\n\n    const gridSizes = { simple: 3, medium: 4, hard: 5 };\n    return (\n      <div className=\"gameBoard\">\n        <h3> Your Playing {this.state.level} Mode </h3>\n        <TicTacToe gridSize={gridSizes[this.state.level]} />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport Game from './ttt/game';\n\nconst App = () => (\n  <div>\n    <h1 style={{ textAlign: 'center', margin: '0 auto' }}>Tic Tac Toe</h1>\n    <Game />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}