{"version":3,"sources":["utilities.js","ticTacToe.js","App.js","serviceWorker.js","index.js"],"names":["getWinningArray","gridSize","xyAxis","axis","row","xAxis","yAxis","colum","push","slice","getXYAxis","crossAxis","crossLeftAxis","crossRightAxis","totalBoxes","Math","pow","rowAxis","getCrossAxis","DisplayGameStatus","props","isGameOver","playerTurn","style","cursor","onClick","window","location","reload","Box","className","onClickListener","value","Table","boxIndex","this","table","key","rowIndex","renderBox","children","renderRow","React","Component","TicTacToe","state","handleOnClick","bind","lines","lineIndex","areInLine","every","box","length","setState","getGameStatus","Options","option","onChangeValue","event","target","onChange","type","name","Screen","level","color","simple","medium","hard","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6ee390a9.chunk.js","sourcesContent":["const getCrossAxis = (gridSize) => {\n  let crossLeftAxis = [];\n  let crossRightAxis = [];\n\n  const totalBoxes = Math.pow(gridSize, 2);\n  for (let rowAxis = 0; rowAxis <= totalBoxes - 1; rowAxis += gridSize + 1) {\n    crossLeftAxis.push(rowAxis);\n  }\n\n  for (\n    let rowAxis = totalBoxes - gridSize;\n    0 < rowAxis;\n    rowAxis -= gridSize - 1\n  ) {\n    crossRightAxis.push(rowAxis);\n  }\n\n  return [crossLeftAxis, crossRightAxis];\n};\n\nconst getXYAxis = (gridSize) => {\n  let axis = [];\n  for (let row = 0; row < gridSize; row++) {\n    const xAxis = [];\n    const yAxis = [];\n    for (let colum = 0; colum < gridSize; colum++) {\n      xAxis.push(colum + row * gridSize);\n      yAxis.push(row + colum * gridSize);\n    }\n    axis.push(xAxis, yAxis);\n  }\n  return axis.slice();\n};\n\nconst getWinningArray = (gridSize) => {\n  let xyAxis = getXYAxis(gridSize);\n  let crossAxis = getCrossAxis(gridSize);\n  return [...xyAxis, ...crossAxis];\n};\n\nexport default getWinningArray;\n","import React from 'react';\nimport './ticTacToe.css';\nimport getWinningArray from './utilities';\n\nconst DisplayGameStatus = (props) => {\n  if (!props.isGameOver) {\n    return <div>It's {props.playerTurn} PlayerTurn</div>;\n  }\n  return (\n    <div>\n      <div>player {props.playerTurn} won the Game</div>\n      <button\n        style={{ cursor: 'pointer' }}\n        onClick={() => window.location.reload()}\n      >\n        Play Again\n      </button>\n    </div>\n  );\n};\n\nconst Box = (props) => {\n  return (\n    <button className=\"box\" onClick={props.onClickListener}>\n      {props.value}\n    </button>\n  );\n};\n\nclass Table extends React.Component {\n  renderBox(boxIndex) {\n    return (\n      <Box\n        value={this.props.table[boxIndex]}\n        onClickListener={() => this.props.onClickListener(boxIndex)}\n        key={boxIndex}\n      />\n    );\n  }\n\n  renderRow(rowIndex) {\n    let row = [];\n    for (let colum = 0; colum < this.props.gridSize; colum++) {\n      row.push(this.renderBox(colum + rowIndex * this.props.gridSize));\n    }\n    return row;\n  }\n\n  render() {\n    let children = [];\n\n    for (let rowIndex = 0; rowIndex < this.props.gridSize; rowIndex++) {\n      const row = this.renderRow(rowIndex);\n      children.push(\n        <div className=\"row\" key={rowIndex}>\n          {row}\n        </div>\n      );\n    }\n    return <div>{children}</div>;\n  }\n}\n\nclass TicTacToe extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      table: [],\n      playerTurn: true,\n      isGameOver: false,\n    };\n    this.handleOnClick = this.handleOnClick.bind(this);\n  }\n\n  getGameStatus(table) {\n    const lines = getWinningArray(this.props.gridSize);\n    for (let lineIndex = 0; lineIndex < lines.length; lineIndex++) {\n      let areInLine = lines[lineIndex].every(\n        (box) => table[box] && table[box] === table[lines[lineIndex][0]]\n      );\n      if (areInLine) return areInLine;\n    }\n    return false;\n  }\n\n  handleOnClick(boxIndex) {\n    this.setState((state) => {\n      if (state.table[boxIndex] || state.isGameOver) return;\n      const table = state.table.slice();\n      table[boxIndex] = state.playerTurn ? 'ðŸŸ¢' : 'ðŸ”´';\n      const isGameOver = this.getGameStatus(table);\n      return {\n        table,\n        playerTurn: isGameOver ? state.playerTurn : !state.playerTurn,\n        isGameOver,\n      };\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Table\n          table={this.state.table}\n          onClickListener={this.handleOnClick}\n          gridSize={this.props.gridSize}\n        />\n        <br></br>\n        <DisplayGameStatus\n          playerTurn={this.state.playerTurn ? 'ðŸŸ¢' : 'ðŸ”´'}\n          isGameOver={this.state.isGameOver}\n        />\n      </div>\n    );\n  }\n}\n\nclass Options extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { option: null };\n    this.handleOnClick = this.handleOnClick.bind(this);\n    this.onChangeValue = this.onChangeValue.bind(this);\n  }\n\n  handleOnClick() {\n    this.props.onClick(this.state.option);\n  }\n\n  onChangeValue(event) {\n    this.setState({ option: event.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"gameBoard\">\n        <div className=\"options\" onChange={this.onChangeValue}>\n          <span>\n            <input type=\"radio\" value=\"simple\" name=\"level\" /> Simple\n          </span>\n          <span>\n            <input type=\"radio\" value=\"medium\" name=\"level\" /> Medium\n          </span>\n          <span>\n            <input type=\"radio\" value=\"hard\" name=\"level\" /> Hard\n          </span>\n        </div>\n        <button className=\"optionBtn\" onClick={this.handleOnClick}>\n          Play\n        </button>\n      </div>\n    );\n  }\n}\n\nclass Screen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { level: null };\n    this.handleOnClick = this.handleOnClick.bind(this);\n  }\n\n  handleOnClick(option) {\n    this.setState({ level: option });\n  }\n\n  render() {\n    if (this.state.level) {\n      const gridSizes = { simple: 3, medium: 4, hard: 5 };\n      return (\n        <div className=\"gameBoard\">\n          <h3>\n            Your Playing\n            <span style={{ color: '</span>' }}> {this.state.level}</span> Mode\n          </h3>\n          <TicTacToe gridSize={gridSizes[this.state.level]} />\n        </div>\n      );\n    }\n\n    return <Options onClick={this.handleOnClick} />;\n  }\n}\n\nexport default Screen;\n","import React from 'react';\nimport Screen from './ticTacToe';\n\nconst App = () => <Screen />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}